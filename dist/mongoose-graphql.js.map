{"version":3,"file":null,"sources":["../lib/getType.js","../lib/getTypeObjects.js","../lib/getTypeTree.js","../lib/index.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nconst getType = typeObject => {\n  let typeString = `type ${typeObject.type} {\\n`;\n\n  Object.keys(typeObject.properties)\n    .sort()\n    .forEach(key => {\n      typeString += `  ${key}: ${typeObject.properties[key]}\\n`;\n    });\n\n  typeString += '}';\n\n  return typeString;\n};\n\nexport default getType;\n","import { forOwn, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\n\nconst getTypeObjects = (name, typeTree) => {\n  let typeObjects = [];\n\n  const currentType = {\n    type: name,\n    properties: {}\n  };\n\n  forOwn(typeTree, (value, key) => {\n    const isArray = Array.isArray(value);\n    const typeValue = isArray ? value[0] : value;\n\n    let type;\n    if (typeof typeValue === 'object') {\n      const childTypeName = pluralize(`${name}${upperFirst(key)}`, 1);\n\n      // Add the child type objects to the front\n      const childTypeObjects = getTypeObjects(childTypeName, typeValue);\n      typeObjects = childTypeObjects.concat(typeObjects);\n\n      type = childTypeName;\n    } else {\n      type = typeValue;\n    }\n\n    if (isArray) {\n      type = `[${type}]`;\n    }\n\n    currentType.properties[key] = type;\n  });\n\n  if (Object.keys(currentType.properties).length > 0) {\n    typeObjects.push(currentType);\n  }\n\n  return typeObjects;\n};\n\nexport default getTypeObjects;\n","/* eslint-disable no-use-before-define */\nimport { forOwn } from 'lodash';\n\nconst setDescendant = (tree, key, value) => {\n  let parentTree = tree;\n\n  // Make sure there is an object for each of the ancestors\n  // Ex. 'location.address.street1'' -> { location: { address: {} } }\n  const splitPath = key.split('.');\n  for (let i = 0; i < splitPath.length - 1; i += 1) {\n    const ancestor = splitPath[i];\n    parentTree[ancestor] = parentTree[ancestor] || {};\n    parentTree = parentTree[ancestor];\n  }\n\n  const property = splitPath[splitPath.length - 1];\n  parentTree[property] = value;\n};\n\nconst instanceToType = instance => {\n  switch (instance) {\n    case 'Boolean':\n      return 'Boolean';\n    case 'ObjectID':\n    case 'String':\n      return 'String';\n    case 'Date':\n    case 'Number':\n      return 'Float';\n    default:\n      throw new Error(`${instance} not implemented yet in instanceToType`);\n  }\n};\n\nconst refToType = instance => {\n  return instance;\n};\n\nconst arrayToTree = path => {\n  if (path.caster && path.caster.instance) {\n    // If a \"ref\" is specified (model utilizes Mongoose population), use the ref name or override\n    if (path.caster.options && path.caster.options.ref) {\n      return [refToType(path.caster.options.ref)];\n    }\n    return [instanceToType(path.caster.instance)];\n  } else if (path.casterConstructor) {\n    return [getTypeTree(path.casterConstructor.schema.paths)];\n  }\n\n  throw new Error(`${path} is not a supported path`);\n};\n\nconst getTypeTree = schemaPaths => {\n  const typeTree = {};\n\n  forOwn(schemaPaths, (path, key) => {\n    if (key === '__v') {\n      return;\n    }\n\n    let value;\n\n    if (path.instance === 'Array') {\n      value = arrayToTree(path);\n    } else if (path.instance === 'Embedded') {\n      value = getTypeTree(path.caster.schema.paths);\n    } else {\n      value = instanceToType(path.instance);\n    }\n\n    setDescendant(typeTree, key, value);\n  });\n\n  return typeTree;\n};\n\nexport default getTypeTree;\n","/* eslint-disable import/prefer-default-export */\nimport { find, forOwn, filter, includes, replace } from 'lodash';\n\nimport getType from './getType';\nimport getTypeObjects from './getTypeObjects';\nimport getTypeTree from './getTypeTree';\n\nexport const modelToType = (model, options = {}) => {\n  const schema = model.schema;\n  const typeTree = getTypeTree(schema.paths);\n  const typeObjects = getTypeObjects(options.name || model.modelName, typeTree);\n\n  if (options.extend) {\n    forOwn(options.extend, (extension, type) => {\n      const typeObject = find(typeObjects, t => t.type === type);\n      Object.assign(typeObject.properties, extension);\n    });\n  }\n\n  // Override refs\n  if (options.refs) {\n    forOwn(options.refs, (ref, type) => {\n      typeObjects.forEach(typeObject => {\n        Object.keys(typeObject.properties).forEach(key => {\n          if (includes(typeObject.properties[key], type)) {\n            typeObject.properties[key] = replace(typeObject.properties[key], type, ref);\n          }\n        });\n      });\n    });\n  }\n\n  const typeStrings = typeObjects.map(getType);\n  return typeStrings.join('\\n');\n};\n"],"names":["getType","typeString","typeObject","type","keys","properties","sort","forEach","key","getTypeObjects","name","typeTree","typeObjects","currentType","value","isArray","Array","typeValue","childTypeName","pluralize","upperFirst","childTypeObjects","concat","Object","length","push","setDescendant","tree","parentTree","splitPath","split","i","ancestor","property","instanceToType","instance","Error","refToType","arrayToTree","path","caster","options","ref","casterConstructor","getTypeTree","schema","paths","schemaPaths","modelToType","model","modelName","extend","extension","find","t","assign","refs","includes","replace","typeStrings","map","join"],"mappings":"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"}